plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '1.5.7.RELEASE'
    id 'io.spring.dependency-management' version "1.0.3.RELEASE"
}

dependencyManagement {
    imports {
        mavenBom 'ru.altarix.msp:msp-boot-dependencies:0.1.0-SNAPSHOT'
    }
}

war {
    baseName = "stub"
    version = "stub"
}

bootRepackage {
    enabled = false
}

springBoot {
    layout = 'WAR'
}

def tomcatPath = System.getenv("TOMCAT_PATH") ? System.getenv("TOMCAT_PATH") : null
if (!tomcatPath) {
    tomcatPath = System.properties['tomcatPath'] ? System.properties['tomcatPath'] : '/opt/tomcat/lib'
}

group 'dependencies'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        url "http://nexus.alx/repository/maven-public"
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-elasticsearch")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    compile("org.springframework.data:spring-data-ldap")

    compile("org.springframework.data:spring-data-mongodb")
    compile("org.springframework.security:spring-security-crypto")

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

    compile("org.postgresql:postgresql")
    compile("org.liquibase:liquibase-core")
    compile("com.mattbertolini:liquibase-slf4j")

    compile("org.hibernate:hibernate-java8")
    compile("org.hibernate:hibernate-spatial") {
        exclude(module: "postgresql")
    }
    compile("org.hibernate:hibernate-validator")

    compile("com.hazelcast:hazelcast")

    compile("com.jayway.jsonpath:json-path")

    compile("org.quartz-scheduler:quartz")
    compile("org.quartz-scheduler:quartz-jobs")
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.13'


    compile("io.springfox:springfox-swagger2")
    compile("io.springfox:springfox-swagger-ui")
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    // https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.11'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-access
    compile group: 'ch.qos.logback', name: 'logback-access', version: '1.2.3'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
}

task printTomcatDependencies {
    doLast {
        configurations.compile.resolvedConfiguration.resolvedArtifacts.each {
            def module = it.moduleVersion.id
            if (module.group != "org.apache.tomcat.embed") {
                println "$module.group, $module.name, $module.version, $it.file.name"
            }
        }
    }
}

task copyTomcatDependencies {
    doLast {
        delete "tomcat_shared_libs"
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each {
            def file = it.file
            def module = it.moduleVersion.id
            if (module.group != "org.apache.tomcat.embed") {
                copy {
                    from file
                    into "tomcat_shared_libs"
                }
            }
        }
    }
}

task tgzTomcatDependencies(type: Tar) {
    archiveName = 'tomcat-lib.tar.gz'
    into ('/'){
        from 'tomcat_shared_libs'
        include '*'
    }

    destinationDir  file('rpm/SOURCES')
    extension 'tar'
    compression = Compression.GZIP
}

tgzTomcatDependencies.dependsOn copyTomcatDependencies

task copyTomcatDependenciesLocal {
    doLast {
        println 'Copy dependencies into dir: ' + tomcatPath
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each {
            def module = it.moduleVersion.id
            def file = it.file
            if (module.name == "snakeyaml") {
                copy {
                    from file
                    into tomcatPath + '/lib'
                }
            } else if (module.group != "org.apache.tomcat.embed") {
                copy {
                    from file
                    into tomcatPath
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}
